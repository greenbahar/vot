// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vot/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateVote struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Question string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Options  string `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	Days     uint32 `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (m *MsgCreateVote) Reset()         { *m = MsgCreateVote{} }
func (m *MsgCreateVote) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVote) ProtoMessage()    {}
func (*MsgCreateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f891990d0eb7e0, []int{0}
}
func (m *MsgCreateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVote.Merge(m, src)
}
func (m *MsgCreateVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVote proto.InternalMessageInfo

func (m *MsgCreateVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateVote) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *MsgCreateVote) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

func (m *MsgCreateVote) GetDays() uint32 {
	if m != nil {
		return m.Days
	}
	return 0
}

type MsgCreateVoteResponse struct {
	IdValue string `protobuf:"bytes,1,opt,name=idValue,proto3" json:"idValue,omitempty"`
}

func (m *MsgCreateVoteResponse) Reset()         { *m = MsgCreateVoteResponse{} }
func (m *MsgCreateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVoteResponse) ProtoMessage()    {}
func (*MsgCreateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f891990d0eb7e0, []int{1}
}
func (m *MsgCreateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVoteResponse.Merge(m, src)
}
func (m *MsgCreateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVoteResponse proto.InternalMessageInfo

func (m *MsgCreateVoteResponse) GetIdValue() string {
	if m != nil {
		return m.IdValue
	}
	return ""
}

type MsgSelectVotingOption struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IdValue        string `protobuf:"bytes,2,opt,name=idValue,proto3" json:"idValue,omitempty"`
	SelectedOption uint64 `protobuf:"varint,3,opt,name=selectedOption,proto3" json:"selectedOption,omitempty"`
}

func (m *MsgSelectVotingOption) Reset()         { *m = MsgSelectVotingOption{} }
func (m *MsgSelectVotingOption) String() string { return proto.CompactTextString(m) }
func (*MsgSelectVotingOption) ProtoMessage()    {}
func (*MsgSelectVotingOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f891990d0eb7e0, []int{2}
}
func (m *MsgSelectVotingOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectVotingOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectVotingOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectVotingOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectVotingOption.Merge(m, src)
}
func (m *MsgSelectVotingOption) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectVotingOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectVotingOption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectVotingOption proto.InternalMessageInfo

func (m *MsgSelectVotingOption) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSelectVotingOption) GetIdValue() string {
	if m != nil {
		return m.IdValue
	}
	return ""
}

func (m *MsgSelectVotingOption) GetSelectedOption() uint64 {
	if m != nil {
		return m.SelectedOption
	}
	return 0
}

type MsgSelectVotingOptionResponse struct {
	IdValue string                                  `protobuf:"bytes,1,opt,name=idValue,proto3" json:"idValue,omitempty"`
	Results []*MsgSelectVotingOptionResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *MsgSelectVotingOptionResponse) Reset()         { *m = MsgSelectVotingOptionResponse{} }
func (m *MsgSelectVotingOptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelectVotingOptionResponse) ProtoMessage()    {}
func (*MsgSelectVotingOptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f891990d0eb7e0, []int{3}
}
func (m *MsgSelectVotingOptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectVotingOptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectVotingOptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectVotingOptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectVotingOptionResponse.Merge(m, src)
}
func (m *MsgSelectVotingOptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectVotingOptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectVotingOptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectVotingOptionResponse proto.InternalMessageInfo

func (m *MsgSelectVotingOptionResponse) GetIdValue() string {
	if m != nil {
		return m.IdValue
	}
	return ""
}

func (m *MsgSelectVotingOptionResponse) GetResults() []*MsgSelectVotingOptionResponse_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type MsgSelectVotingOptionResponse_Result struct {
	Option  string `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	Counter int64  `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *MsgSelectVotingOptionResponse_Result) Reset()         { *m = MsgSelectVotingOptionResponse_Result{} }
func (m *MsgSelectVotingOptionResponse_Result) String() string { return proto.CompactTextString(m) }
func (*MsgSelectVotingOptionResponse_Result) ProtoMessage()    {}
func (*MsgSelectVotingOptionResponse_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f891990d0eb7e0, []int{3, 0}
}
func (m *MsgSelectVotingOptionResponse_Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectVotingOptionResponse_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectVotingOptionResponse_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectVotingOptionResponse_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectVotingOptionResponse_Result.Merge(m, src)
}
func (m *MsgSelectVotingOptionResponse_Result) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectVotingOptionResponse_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectVotingOptionResponse_Result.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectVotingOptionResponse_Result proto.InternalMessageInfo

func (m *MsgSelectVotingOptionResponse_Result) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

func (m *MsgSelectVotingOptionResponse_Result) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCreateVote)(nil), "greenbahar.vot.vot.MsgCreateVote")
	proto.RegisterType((*MsgCreateVoteResponse)(nil), "greenbahar.vot.vot.MsgCreateVoteResponse")
	proto.RegisterType((*MsgSelectVotingOption)(nil), "greenbahar.vot.vot.MsgSelectVotingOption")
	proto.RegisterType((*MsgSelectVotingOptionResponse)(nil), "greenbahar.vot.vot.MsgSelectVotingOptionResponse")
	proto.RegisterType((*MsgSelectVotingOptionResponse_Result)(nil), "greenbahar.vot.vot.MsgSelectVotingOptionResponse.Result")
}

func init() { proto.RegisterFile("vot/tx.proto", fileDescriptor_d4f891990d0eb7e0) }

var fileDescriptor_d4f891990d0eb7e0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x1d, 0x23, 0x7a, 0xef, 0xb9, 0xd7, 0xbb, 0x18, 0xb8, 0x25, 0x04, 0x1a, 0x6c, 0xa0,
	0x45, 0x37, 0x11, 0xed, 0xa6, 0x74, 0x53, 0x68, 0xd7, 0x52, 0x98, 0x82, 0x0b, 0x77, 0x51, 0x0f,
	0x31, 0x60, 0x33, 0xe9, 0xcc, 0x44, 0xf4, 0x2d, 0xfa, 0x58, 0xed, 0xce, 0x4d, 0xa1, 0xcb, 0xa2,
	0x2f, 0x52, 0x32, 0x49, 0xfc, 0xd3, 0x6a, 0x6d, 0x17, 0x09, 0xf3, 0xcd, 0xcc, 0xf9, 0x7d, 0x67,
	0xbe, 0x61, 0xe0, 0xef, 0x84, 0xab, 0xa6, 0x9a, 0xba, 0x91, 0xe0, 0x8a, 0x53, 0xea, 0x0b, 0xc4,
	0xb0, 0xef, 0x8d, 0x3c, 0xe1, 0x4e, 0xb8, 0x4a, 0x3e, 0x47, 0x42, 0xb5, 0x23, 0xfd, 0x1b, 0x81,
	0x9e, 0xc2, 0x2e, 0x57, 0x48, 0x4d, 0xa8, 0x0c, 0x12, 0xc5, 0x85, 0x49, 0x6a, 0xa4, 0xfe, 0x9b,
	0xe5, 0x92, 0x5a, 0xf0, 0xeb, 0x21, 0x46, 0xa9, 0x02, 0x1e, 0x9a, 0x45, 0xbd, 0xb4, 0xd2, 0x49,
	0x15, 0x8f, 0x92, 0x91, 0x34, 0x8d, 0xb4, 0x2a, 0x93, 0x94, 0x42, 0x69, 0xe8, 0xcd, 0xa4, 0x59,
	0xaa, 0x91, 0x7a, 0x95, 0xe9, 0xb1, 0xd3, 0x82, 0xff, 0x5b, 0xa6, 0x0c, 0x65, 0xc4, 0x43, 0xa9,
	0xcd, 0x83, 0x61, 0xd7, 0x1b, 0xc7, 0x98, 0x9b, 0x67, 0xd2, 0x91, 0xba, 0xe4, 0x0e, 0xc7, 0x38,
	0x50, 0x5d, 0xae, 0x82, 0xd0, 0xbf, 0x8d, 0x72, 0xe7, 0x3d, 0xfd, 0x6e, 0xc0, 0x8a, 0x5b, 0x30,
	0x7a, 0x06, 0xff, 0xa4, 0x26, 0xe1, 0x30, 0xa5, 0xe8, 0xa6, 0x4b, 0xec, 0xc3, 0xac, 0xf3, 0x4c,
	0xe0, 0x78, 0xa7, 0xeb, 0xe1, 0x86, 0x29, 0x83, 0x8a, 0x40, 0x19, 0x8f, 0x95, 0x34, 0x8b, 0x35,
	0xa3, 0xfe, 0xa7, 0x7d, 0xe1, 0x7e, 0x8e, 0xdf, 0xfd, 0x92, 0xee, 0x32, 0x0d, 0x60, 0x39, 0xc8,
	0xba, 0x84, 0x72, 0x3a, 0x45, 0x8f, 0xa0, 0x9c, 0x06, 0x9c, 0xd9, 0x66, 0x4a, 0xa7, 0xc1, 0xe3,
	0x50, 0xa1, 0xd0, 0x67, 0x36, 0x58, 0x2e, 0xdb, 0x2f, 0x04, 0x8c, 0x8e, 0xf4, 0x69, 0x0f, 0x60,
	0xe3, 0xb6, 0x4f, 0xf6, 0x34, 0xb5, 0xde, 0x62, 0x35, 0x0e, 0x6e, 0x59, 0xa5, 0x21, 0x80, 0xee,
	0xb8, 0xa1, 0xc6, 0xb7, 0x0f, 0x6e, 0xb5, 0x7e, 0x9c, 0xd1, 0xf5, 0xd5, 0xd3, 0xc2, 0x26, 0xf3,
	0x85, 0x4d, 0xde, 0x16, 0x36, 0x79, 0x5c, 0xda, 0x85, 0xf9, 0xd2, 0x2e, 0xbc, 0x2e, 0xed, 0x42,
	0xef, 0xd4, 0x0f, 0xd4, 0x28, 0xee, 0xbb, 0x03, 0x7e, 0xdf, 0x5c, 0x63, 0x9b, 0xc9, 0x93, 0x98,
	0xea, 0xbf, 0x9a, 0x45, 0x28, 0xfb, 0x65, 0xfd, 0x38, 0xce, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x3f, 0x60, 0x73, 0x2c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateVote(ctx context.Context, in *MsgCreateVote, opts ...grpc.CallOption) (*MsgCreateVoteResponse, error)
	SelectVotingOption(ctx context.Context, in *MsgSelectVotingOption, opts ...grpc.CallOption) (*MsgSelectVotingOptionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVote(ctx context.Context, in *MsgCreateVote, opts ...grpc.CallOption) (*MsgCreateVoteResponse, error) {
	out := new(MsgCreateVoteResponse)
	err := c.cc.Invoke(ctx, "/greenbahar.vot.vot.Msg/CreateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelectVotingOption(ctx context.Context, in *MsgSelectVotingOption, opts ...grpc.CallOption) (*MsgSelectVotingOptionResponse, error) {
	out := new(MsgSelectVotingOptionResponse)
	err := c.cc.Invoke(ctx, "/greenbahar.vot.vot.Msg/SelectVotingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateVote(context.Context, *MsgCreateVote) (*MsgCreateVoteResponse, error)
	SelectVotingOption(context.Context, *MsgSelectVotingOption) (*MsgSelectVotingOptionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateVote(ctx context.Context, req *MsgCreateVote) (*MsgCreateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVote not implemented")
}
func (*UnimplementedMsgServer) SelectVotingOption(ctx context.Context, req *MsgSelectVotingOption) (*MsgSelectVotingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectVotingOption not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenbahar.vot.vot.Msg/CreateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVote(ctx, req.(*MsgCreateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelectVotingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelectVotingOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelectVotingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenbahar.vot.vot.Msg/SelectVotingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelectVotingOption(ctx, req.(*MsgSelectVotingOption))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greenbahar.vot.vot.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVote",
			Handler:    _Msg_CreateVote_Handler,
		},
		{
			MethodName: "SelectVotingOption",
			Handler:    _Msg_SelectVotingOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vot/tx.proto",
}

func (m *MsgCreateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Days != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Options) > 0 {
		i -= len(m.Options)
		copy(dAtA[i:], m.Options)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Options)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdValue) > 0 {
		i -= len(m.IdValue)
		copy(dAtA[i:], m.IdValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectVotingOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectVotingOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectVotingOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SelectedOption != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SelectedOption))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IdValue) > 0 {
		i -= len(m.IdValue)
		copy(dAtA[i:], m.IdValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectVotingOptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectVotingOptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectVotingOptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IdValue) > 0 {
		i -= len(m.IdValue)
		copy(dAtA[i:], m.IdValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectVotingOptionResponse_Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectVotingOptionResponse_Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectVotingOptionResponse_Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Days != 0 {
		n += 1 + sovTx(uint64(m.Days))
	}
	return n
}

func (m *MsgCreateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectVotingOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IdValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SelectedOption != 0 {
		n += 1 + sovTx(uint64(m.SelectedOption))
	}
	return n
}

func (m *MsgSelectVotingOptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSelectVotingOptionResponse_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovTx(uint64(m.Counter))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectVotingOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectVotingOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectVotingOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedOption", wireType)
			}
			m.SelectedOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectedOption |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectVotingOptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectVotingOptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectVotingOptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &MsgSelectVotingOptionResponse_Result{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectVotingOptionResponse_Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
